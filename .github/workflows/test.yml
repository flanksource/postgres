name: Test PostgreSQL Upgrade Images

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test-builds:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_version: ['15', '16', '17', '18']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Build image for target version ${{ matrix.target_version }}
        run: |
          make build-${{ matrix.target_version }}

      - name: Test upgrade to ${{ matrix.target_version }}
        env:
          GITHUB_ACTIONS: "true"
        run: |
          # Clean any existing volumes
          make clean || true
          
          # Run tests based on target version
          case "${{ matrix.target_version }}" in
            15)
              # Test 14 -> 15
              make test-14-to-15
              ;;
            16)
              # Test 14 -> 16 and 15 -> 16
              make test-14-to-16
              make test-15-to-16
              ;;
            17)
              # Test all paths to 17
              make test
              ;;
            18)
              # Test all paths to 18
              make test-14-to-18
              make test-15-to-18
              make test-16-to-18
              make test-17-to-18
              ;;
          esac

  test-complete-suite:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Run complete test suite
        env:
          GITHUB_ACTIONS: "true"
        run: |
          # Clean any existing state
          make clean || true
          
          # Build default image
          make build
          
          # Run all upgrade tests
          make test
          
          # Run feature tests if available
          if [ -f "Taskfile.test.yaml" ]; then
            # Install task runner
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
            
            # Run basic feature verification
            task test:verify-extensions || echo "Extensions verification not available"
            task test:verify-services || echo "Services verification not available"
          fi
