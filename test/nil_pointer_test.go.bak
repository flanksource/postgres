package test

import (
	"testing"

	"github.com/flanksource/postgres/pkg"
	"github.com/flanksource/postgres/pkg/health"
)

func TestNilPointerSafety(t *testing.T) {
	t.Run("WAL-G nil receiver", func(t *testing.T) {
		var walg *pkg.WalG // nil receiver
		err := walg.Health()
		if err == nil {
			t.Error("Expected error for nil WAL-G service")
		}
		if err.Error() != "WAL-G service is nil" {
			t.Errorf("Expected 'WAL-G service is nil', got %v", err)
		}
	})

	t.Run("PostgreSQL nil receiver", func(t *testing.T) {
		var postgres pkg.Postgres // nil receiver
		_, err := postgres.SQL("SELECT 1")
		if err == nil {
			t.Error("Expected error for nil PostgreSQL service")
		}
		if err.Error() != "PostgreSQL service is nil" {
			t.Errorf("Expected 'PostgreSQL service is nil', got %v", err)
		}
	})

	t.Run("PgBouncer nil receiver", func(t *testing.T) {
		var pgbouncer *pkg.PgBouncer // nil receiver
		err := pgbouncer.Health()
		if err == nil {
			t.Error("Expected error for nil PgBouncer service")
		}
		if err.Error() != "PgBouncer service is nil" {
			t.Errorf("Expected 'PgBouncer service is nil', got %v", err)
		}
	})

	t.Run("PostgREST nil receiver", func(t *testing.T) {
		var postgrest *pkg.PostgREST // nil receiver
		err := postgrest.Health()
		if err == nil {
			t.Error("Expected error for nil PostgREST service")
		}
		if err.Error() != "PostgREST service is nil" {
			t.Errorf("Expected 'PostgREST service is nil', got %v", err)
		}
	})

	t.Run("Health checkers with nil services", func(t *testing.T) {
		// Test WAL-G checker with nil service
		walgChecker := health.NewWalgChecker(nil)
		status, err := walgChecker.Status()
		if err == nil {
			t.Error("Expected error for nil WAL-G service in checker")
		}
		if statusMap, ok := status.(map[string]interface{}); ok {
			if statusMap["status"] != "unknown" {
				t.Errorf("Expected status 'unknown', got %v", statusMap["status"])
			}
		} else {
			t.Error("Expected status to be a map")
		}

		// Test PostgreSQL checker with nil service
		postgresChecker := health.NewPostgreSQLChecker(nil)
		status, err = postgresChecker.Status()
		if err == nil {
			t.Error("Expected error for nil PostgreSQL service in checker")
		}
		if statusMap, ok := status.(map[string]interface{}); ok {
			if statusMap["status"] != "unknown" {
				t.Errorf("Expected status 'unknown', got %v", statusMap["status"])
			}
		} else {
			t.Error("Expected status to be a map")
		}

		// Test PgBouncer checker with nil service
		pgbouncerChecker := health.NewPgBouncerChecker(nil)
		status, err = pgbouncerChecker.Status()
		if err == nil {
			t.Error("Expected error for nil PgBouncer service in checker")
		}
		if statusMap, ok := status.(map[string]interface{}); ok {
			if statusMap["status"] != "unknown" {
				t.Errorf("Expected status 'unknown', got %v", statusMap["status"])
			}
		} else {
			t.Error("Expected status to be a map")
		}
	})

	t.Run("Health checker configuration nil safety", func(t *testing.T) {
		// Test NewHealthChecker with nil config
		_, err := health.NewHealthChecker(nil)
		if err == nil {
			t.Error("Expected error for nil configuration")
		}
		if err.Error() != "configuration cannot be nil" {
			t.Errorf("Expected 'configuration cannot be nil', got %v", err)
		}
	})
}
