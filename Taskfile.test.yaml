version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

vars:
  TEST_DIR: ./test
  GO_TEST_FLAGS: -v -timeout 30m

tasks:
  # Docker image testing tasks
  test-image:
    desc: Build Docker image and run integration tests
    deps: [build]
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "🧪 Running Docker image integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration

  # Integration testing tasks
  test-integration:
    desc: Run comprehensive integration tests
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Running comprehensive integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration

  test-extensions:
    desc: Test all PostgreSQL extensions functionality
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧩 Testing PostgreSQL extensions..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresIntegration.*extension"

  test-services:
    desc: Test all integrated services (PgBouncer, PostgREST, WAL-G)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "⚙️ Testing integrated services..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresIntegration.*(PgBouncer|PostgREST|WAL)"

  test-enhanced:
    desc: Run enhanced integration tests (Kubernetes-based)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🚀 Running enhanced integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestEnhanced

  # Main test tasks using Go tests
  all:
    desc: Run all PostgreSQL tests (upgrades, integration, extensions)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Running all PostgreSQL tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration
        go test {{.GO_TEST_FLAGS}} -run TestEnhanced

  all-upgrades:
    desc: Run all PostgreSQL upgrade tests only
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Running all PostgreSQL upgrade tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade

  all-features:
    desc: Run all feature tests (extensions, services, integrations)
    deps: [test-integration, test-extensions, test-services, test-enhanced]
    cmds:
      - echo "✅ All feature tests completed"

  upgrade-14-to-17:
    desc: Test upgrade from PostgreSQL 14 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 14 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_14_to_17"

  upgrade-15-to-17:
    desc: Test upgrade from PostgreSQL 15 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 15 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_17"

  upgrade-16-to-17:
    desc: Test upgrade from PostgreSQL 16 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 16 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_16_to_17"

  upgrade-15-to-16:
    desc: Test upgrade from PostgreSQL 15 to 16
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 15 to 16..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_16"

  # Quick test for development
  quick:
    desc: Quick development test (14 to 17 upgrade only)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "⚡ Running quick test..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgradeQuick

  # Build task
  build:
    desc: Build the flanksource/postgres Docker image
    cmds:
      - task build:build

  # Status task using Go test
  status:
    desc: Show status of volumes and images
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "📊 Checking Docker resources status..."
        go test {{.GO_TEST_FLAGS}} -run TestShowUpgradeStatus

  # Test coverage and reporting
  test-coverage:
    desc: Run tests with coverage report
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "📊 Running tests with coverage..."
        go test -coverprofile=coverage.out {{.GO_TEST_FLAGS}} ./...
        go tool cover -html=coverage.out -o coverage.html
        echo "✅ Coverage report generated: test/coverage.html"

  test-report:
    desc: Generate test report
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "📊 Generating test report..."
        go test {{.GO_TEST_FLAGS}} -json ./... | tee test-report.json
        echo "✅ Test report generated: test/test-report.json"

  # CI/CD specific tasks
  ci-test:
    desc: Run tests in CI environment
    dir: "{{.TEST_DIR}}"
    deps: [build]
    env:
      CI: "true"
    cmds:
      - |
        echo "🤖 Running tests in CI mode..."
        go test {{.GO_TEST_FLAGS}} -json ./... | tee test-results.json
        # Generate JUnit XML for CI systems
        go install github.com/jstemmer/go-junit-report/v2@latest
        cat test-results.json | go-junit-report -out junit.xml
        echo "✅ Test results saved to test/junit.xml"

  # Clean task
  # Utility and maintenance tasks

  clean:
    desc: Clean up test resources and Docker volumes
    cmds:
      - |
        echo "🧹 Cleaning up test resources..."
        docker stop postgres-integration-test postgres-upgrade-test || true
        docker rm postgres-integration-test postgres-upgrade-test || true
        docker volume prune -f --filter label=cleanup=test || true
        docker system prune -f || true
        echo "✅ Cleanup completed"

  # Help task
  help:
    desc: Show available tasks and usage examples
    cmds:
      - task --list
      - |
        echo ""
        echo "📚 Usage Examples:"
        echo "  task test:all                    # Run all tests (upgrades + features)"
        echo "  task test:test-image             # Build and test Docker image"
        echo "  task test:test-integration       # Run integration tests"
        echo "  task test:test-extensions        # Test PostgreSQL extensions"
        echo "  task test:test-services          # Test integrated services"
        echo "  task test:clean                  # Clean up test resources"
