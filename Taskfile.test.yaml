version: "3"

# GitHub Actions output grouping
output:
  group:
    begin: "::group::{{.TASK}}"
    end: "::endgroup::"

vars:
  TEST_DIR: ./test
  GO_TEST_FLAGS: -v -timeout 30m
  POSTGRES_IMAGE: flanksource/postgres:test
  KIND_CLUSTER_NAME: postgres-ct-test
  KIND_KUBECONFIG: /tmp/postgres-ct-kubeconfig

tasks:
  # Docker image testing tasks
  test-image:
    desc: Build Docker image and run integration tests
    deps: [build]
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "🧪 Running Docker image integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration

  # Integration testing tasks
  test-integration:
    desc: Run comprehensive integration tests
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Running comprehensive integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration

  test-extensions:
    desc: Test all PostgreSQL extensions functionality
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧩 Testing PostgreSQL extensions..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresIntegration.*extension"

  test-services:
    desc: Test all integrated services (PgBouncer, PostgREST, WAL-G)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "⚙️ Testing integrated services..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresIntegration.*(PgBouncer|PostgREST|WAL)"

  test-enhanced:
    desc: Run enhanced integration tests (Kubernetes-based)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🚀 Running enhanced integration tests..."
        go test {{.GO_TEST_FLAGS}} -run TestEnhanced

  # Main test tasks using Go tests
  all:
    desc: Run all PostgreSQL tests (upgrades, integration, extensions)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Running all PostgreSQL tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade
        go test {{.GO_TEST_FLAGS}} -run TestPostgresIntegration
        go test {{.GO_TEST_FLAGS}} -run TestEnhanced

  all-upgrades:
    desc: Run all PostgreSQL upgrade tests only
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Running all PostgreSQL upgrade tests..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgrade

  all-features:
    desc: Run all feature tests (extensions, services, integrations)
    deps: [test-integration, test-extensions, test-services, test-enhanced]
    cmds:
      - echo "✅ All feature tests completed"

  upgrade-14-to-17:
    desc: Test upgrade from PostgreSQL 14 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 14 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_14_to_17"

  upgrade-15-to-17:
    desc: Test upgrade from PostgreSQL 15 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 15 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_17"

  upgrade-16-to-17:
    desc: Test upgrade from PostgreSQL 16 to 17
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 16 to 17..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_16_to_17"

  upgrade-15-to-16:
    desc: Test upgrade from PostgreSQL 15 to 16
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "🧪 Testing upgrade from PostgreSQL 15 to 16..."
        go test {{.GO_TEST_FLAGS}} -run "TestPostgresUpgrade/Upgrade_15_to_16"

  # Quick test for development
  quick:
    desc: Quick development test (14 to 17 upgrade only)
    dir: "{{.TEST_DIR}}"
    deps: [build]
    cmds:
      - |
        echo "⚡ Running quick test..."
        go test {{.GO_TEST_FLAGS}} -run TestPostgresUpgradeQuick

  # Build task
  build:
    desc: Build the flanksource/postgres Docker image
    cmds:
      - task build:build

  # Status task using Go test
  status:
    desc: Show status of volumes and images
    dir: "{{.TEST_DIR}}"
    cmds:
      - |
        echo "📊 Checking Docker resources status..."
        go test {{.GO_TEST_FLAGS}} -run TestShowUpgradeStatus

  clean:
    desc: Clean up test resources and Docker volumes
    cmds:
      - |
        echo "🧹 Cleaning up test resources..."
        docker stop postgres-integration-test postgres-upgrade-test || true
        docker rm postgres-integration-test postgres-upgrade-test || true
        docker volume prune -f --filter label=cleanup=test || true
        docker system prune -f || true
        echo "✅ Cleanup completed"

  # Helm E2E testing tasks
  helm:e2e:
    desc: Run end-to-end Helm chart tests with kind cluster
    deps: [build]
    dir: test
    cmds:
      - go test -v ./helm

  helm:e2e:clean:
    desc: Delete the kind cluster used for helm e2e tests
    cmds:
      - |
        CLUSTER_NAME="{{.KIND_CLUSTER_NAME}}"
        KUBECONFIG_PATH="{{.KIND_KUBECONFIG}}"

        echo "🧹 Cleaning up kind cluster: $CLUSTER_NAME..."
        kind delete cluster --name "$CLUSTER_NAME" 2>/dev/null || echo "Cluster already deleted"
        rm -f "$KUBECONFIG_PATH" 2>/dev/null || true
        echo "✅ Cleanup complete"
